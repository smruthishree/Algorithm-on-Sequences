# -*- coding: utf-8 -*-
"""KMP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10UNVStNgvNx_qPW37JD4BElwQ12k6qVM
"""

from typing import Pattern
from typing import Text

def KmpAlgo(p, t):
    len1 = len(t)
    len2 = len(p)
    substring = get_substring(p, len2)
  
    lcps = []
    m = 0
    n = 0
  
    while m != len1:
       
        if t[m] == p[n]:
            m += 1
            n += 1
      
        else:
            n = substring[n-1]
       
        if n == len2:
            lcps.append(m-n)
            n = substring[n-1]
        elif n == 0:
            m += 1
   
    return lcps

def get_substring(p, len2):
    substring = [0] * len2
    n = 0
    m = 1

    while m != len2:
        if p[m] == p[n]:
            n += 1
            substring[m] = n
            m += 1
        elif n != 0:
                n = substring[n-1]
        else:
            substring[m] = 0
            m += 1
            
    return substring

Text = "HElloworld"
Pattern = "Ello"
lcps = KmpAlgo(Pattern, Text)
for n in lcps:
    print('Pattern is present at the index',n)

Text = "FHDFGGTDJUGGTXAABRGGTXSI"
Pattern = "GGTX"
lcps = KmpAlgo(Pattern, Text)
for n in lcps:
    print('Pattern is present at the index',n)